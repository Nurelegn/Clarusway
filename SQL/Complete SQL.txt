SQLite: How can we retrieve the total amount of tables in a database?
--------------------------------------------------------------------------------------------------------
Query  : SELECT count(*) FROM sqlite_master WHERE type = 'table'; 
Result : 13


SQLite: How can we retrieve the amount of columns in a table?
--------------------------------------------------------------------------------------------------------
Query  : SELECT count(*) FROM pragma_table_info('albums');
Result : 3


SQLite: How to retrieve all columns and all rows in a table, a complete view of the table?
--------------------------------------------------------------------------------------------------------
Query  : select * from invoices
Result : A complete table content is displayed.


General: How do we select a single column from a table?
--------------------------------------------------------------------------------------------------------
Query  : select invoiceid from invoices
Result : Only invoiceid column contents are displayed.


General: How do we order the items by total column in the previous query?
--------------------------------------------------------------------------------------------------------
Query  : select invoiceID from invoices order by total asc
Result : Only invoiceid column contents are displayed but ordered in an ASCENDING form. 
Info   : We can also view the contents in a DESCENDING form by using "desc" keyword instead of "asc" keyword in the query, please try it. 


General: How do we select multiple columns, the desired columns from a table?
--------------------------------------------------------------------------------------------------------
Query  : select invoiceid, BillingCity, BillingCountry from invoices
Result : Only invoiceid, BillingCity, BillingCountry column contents are displayed.
Info   : We can ask any existing column from SQL. If we need all columns we ask it with "*".


General: How can we give an alias to a column?
--------------------------------------------------------------------------------------------------------
Query  : select invoiceid as number,  BillingCountry as origin from invoices
Result : We receive a resultset including columns with titles, number and origin. 


General: How many different cities do we have in invoices table?
--------------------------------------------------------------------------------------------------------
Query  : select distinct BillingCity from invoices
Result : The result is a unique list of cities. 


General: How many different unit_price values do exist in invoice_items? What is the SQL statement for it?
--------------------------------------------------------------------------------------------------------
Query  : select count(distinct unitprice) as DistinctUnitPrice from invoice_items
Result : 2 different values.


General: List all values of the employees who live in the city of Calgary, write SQL for it.
--------------------------------------------------------------------------------------------------------
Query  : select * from employees where city = "Calgary"
Result : 2 different values.


General: In the previous example how many rows do we get if we ask it with "CalGary"
--------------------------------------------------------------------------------------------------------
Query  : select * from employees where city = "CalGary"
Result : No rows


General: What is the Title of the 5th employee for "select * from employees where city = "Calgary"
--------------------------------------------------------------------------------------------------------
Query  : select * from employees where city = "Calgary"
Result : IT Manager


General: Write a query that brings all values of Total column greater than 13 from invoices table
--------------------------------------------------------------------------------------------------------
Query  : select Total from invoices where total > 13
Result : 61 rows of total column records. 


General: Write a query that brings all values that have less or equal value of Total 5.94 from invoices table, how many records? 
--------------------------------------------------------------------------------------------------------
Query  : select * from invoices where Total <= 5.94
Result : 288 invoice records


General: Bring all columns of Customers excluding customers from Brussels
--------------------------------------------------------------------------------------------------------
Query  : select * from customers where city <> "Brussels"
Result : 58 Records.


General: Bring all columns of Customers excluding customers from Brussels, Prague and Vienne
--------------------------------------------------------------------------------------------------------
Query  : select * from customers where city not in ("Brussels", "Prague", "Vienne")
Result : 55 Records.


General: How many customers do exist in Customers table that are not from city of Brussels and who has Customer ID greater than 20? 
--------------------------------------------------------------------------------------------------------
Query  : select * from customers where city <> "Brussels" and customerid > 20
Result : 39 Records


General: Write a query that brings a list of all customers that are from City Rome or Country Spain.
--------------------------------------------------------------------------------------------------------
Query  : select * from customers where City = "Rome" OR Country = "Spain"
Result : 2 Customers


General: Write a query that brings all infromation of employee whose FirstName is "Steve"
--------------------------------------------------------------------------------------------------------
Query  : select * from employees where Firstname = "Steve
Result : 1 row of information


General:  Make a unique (non duplicated) list of countries of customers table.
--------------------------------------------------------------------------------------------------------
Query  : select distinct country from customers,  or we could say : select distinct(country) from customers
Result : 24 rows of different countries.


General: What changes if we use "select distinct(country), FirstName, LastName from customers" query, can distinct keyword work as expected?
--------------------------------------------------------------------------------------------------------
Query  : select distinct(country), FirstName, LastName from customers
Result : 59 rows but with repeated items.


General: List all customers who have "j" in their lastnames.
--------------------------------------------------------------------------------------------------------
Query  : select * from customers where Lastname like "%j%"
Result : 4 rows


General: Write an SQL that brings FIRST 5 records from invoice_items table only
--------------------------------------------------------------------------------------------------------
Query  : select * from invoices limit 5
Result : Top 5 records


General: Write an SQL that brings LAST 5 records from invoice_items table only 
--------------------------------------------------------------------------------------------------------
Query  : select * from invoices order by invoiceID DESC limit 5
Result : Last 5 records


General: Bring all invoices that have total in between 2 and 5.94 
--------------------------------------------------------------------------------------------------------
Query  : select * from invoices where total between 2 and 5.94
Result : 120 records


General: Bring all invoices that have BillingCity Paris, Dublin and London by using in operator, and where their total is > 1.98 
--------------------------------------------------------------------------------------------------------
Query  : select * from invoices where BillingCity in ("Paris", "Dublin", "London") and total > 1.98
Result : 21 records


General: Create a view from previous SQL query 
--------------------------------------------------------------------------------------------------------
Query  : CREATE VIEW [EuropeCentralSalesReport] AS select * from invoices where BillingCity in ("Paris", "Dublin", "London") and total > 1.98;
         select * from EuropeCentralSalesReport
Result : 21 records from EuropeCentralSalesReport


General: Write a query that brings all customers having "e" in their lastname's second letter who also lives in Paris only 
--------------------------------------------------------------------------------------------------------
Query  : SELECT * FROM customers where lastname like "_e%" and City="Paris"
Result : 2 Customers


General: Get the list of customers, order it by their FirstName descending, LastName ascending form.  
--------------------------------------------------------------------------------------------------------
Query  : select * from customers order by FirstName desc, LastName asc
Result : 59 records, observe the updates in LastName especially.


General: Select the minimum value of Total field in invoices table
--------------------------------------------------------------------------------------------------------
Query  : select min(total) from invoices
Result : 0.33


General: What is the earliest invoicedate in invoices table 
--------------------------------------------------------------------------------------------------------
Query  : select min(invoicedate) from invoices
Result : 2009-01-01 00:00:00


General: What is the sum of all Total colums in invoices table. 
--------------------------------------------------------------------------------------------------------
Query  : select sum(invoices.Total) from invoices
Result : 2330.47 


General: How to write a select query that calculates : ((4+5)*10)/3, give it an alias as well.
--------------------------------------------------------------------------------------------------------
Query  : select ((4+5)*10)/3 as MyFinalResult
Result : 30


General: Write a query that brings the result of min+max values of Total field in invoices table  
--------------------------------------------------------------------------------------------------------
Query  : select min(invoices.Total) + max(invoices.Total) from invoices 
Result : 27.19


General: What is the average value of Total field in invoices table? 
--------------------------------------------------------------------------------------------------------
Query  : select AVG(Total) from invoices, or after rounding = SELECT round(avg(Total),3) from invoices
Result : 5.65648058252428


General: How many distinct Cities are the customers located? 
--------------------------------------------------------------------------------------------------------
Query  : select count(distinct city) from customers
Result : 53


General: Find the sum of totals of all Cities in invoices.
--------------------------------------------------------------------------------------------------------
Query  : select CustomerId, BillingCity, sum(invoices.Total) from invoices GROUP by invoices.BillingCity
Result : 53 cities and their corresponding sums.


General: Find the maximum values of Total column by the countries. 
--------------------------------------------------------------------------------------------------------
Query  : select CustomerId, BillingCountry, max(invoices.Total) from invoices Group by invoices.BillingCountry
Result : 24 countries and their corresponding maximum values.


General: Generate a list that displays Country, count(Country) from customers table. 
--------------------------------------------------------------------------------------------------------
Query  : select Country, count(Country) from customers group by Customers.Country
Result : 24 countries with the quantities. 


General: Join 2 tables to display the customer names in invoices table.  
--------------------------------------------------------------------------------------------------------
Query  : select invoices.InvoiceId, customers.firstname, customers.lastname, invoices.BillingCity, invoices.Total, invoices.InvoiceDate from customers join invoices on customers.CustomerId = invoices.CustomerId
	    order by invoices.InvoiceId asc
Result : 412 invoice records with the actual customer names. 


General: Display a list of tracks of tracks.TrackId, Name, albums.Title, media_types.Name, genres.Name, tracks.composer, tracks.unitprice and order it by TrackId ascending  
--------------------------------------------------------------------------------------------------------
Query  : select tracks.TrackId, 
         tracks.name TrackName, 
         albums.title AlbumTitle, 
         media_types.Name MediaType,
         genres.Name GenreName, 
         tracks.composer, 
         tracks.UnitPrice
         from tracks 
				join albums on albums.AlbumId = tracks.AlbumId 
				join genres on tracks.GenreId = genres.GenreId
				join media_types on media_types.MediaTypeId = tracks.MediaTypeId
		order by tracks.TrackId asc 
Result : 3503 records of joined data


General: Create a view from previous SQL query 
--------------------------------------------------------------------------------------------------------
Query  : CREATE VIEW [CompleteTracksReport] AS 
         select tracks.TrackId, 
         tracks.name TrackName, 
         albums.title AlbumTitle, 
         media_types.Name MediaType,
         genres.Name GenreName, 
         tracks.composer, 
         tracks.UnitPrice
         from tracks 
				join albums on albums.AlbumId = tracks.AlbumId 
				join genres on tracks.GenreId = genres.GenreId
				join media_types on media_types.MediaTypeId = tracks.MediaTypeId
		order by tracks.TrackId asc ;

         select * from CompleteTracksReport

Result : 3503 records from CompleteTracksReport


General: Display sum, avg, min, max of Total column in invoices tables with their aliases.
--------------------------------------------------------------------------------------------------------
Query  : select sum(total), avg(total), min(total), max(total) from invoices. (Give alias to all)
       : Alternatively:  select sum(total), ROUND(avg(total),2) as AVERAGE, min(total), max(total) from invoices
Result : 2330.47	5.65648058252428	0.33		26.86


General: Create a view from previous SQL query 
--------------------------------------------------------------------------------------------------------
Query  : CREATE VIEW [GeneralSalesReport] AS select sum(total), ROUND(avg(total),2) as AVERAGE, min(total), max(total) from invoices
         select * from GeneralSalesReport
Result : 1 row of general report


General: Find total count of composer column in tracks, 
--------------------------------------------------------------------------------------------------------
Query  : select count(composer) from tracks
         select count(distinct composer) from tracks
Result : 2526, 853


General: Find all tracks where composer starts with "Audio"
--------------------------------------------------------------------------------------------------------
Query  : select * from tracks where composer like 'Audio%'
Result : 14 records


General: Find all invoices for BillingCity in a list of "Paris", "London", "Toronto" 
--------------------------------------------------------------------------------------------------------
Query  : select * from invoices where BillingCity in ('Paris', 'London', 'Toronto') order by BillingCity ASC
Result : 35 records


General: Find all the records in invoices table where Total is not in between 3.96 and 8.91, order Total in Ascending form, limit the results to 5.
--------------------------------------------------------------------------------------------------------
Query  : select * from invoices where total not between 3.96 and 8.91 order by Total ASC limit 5
Result : 5 requested records.


General: Display a list of customers under a condition: if any customer has e-mail in list = ('bjorn.hansen@yahoo.no', 'kara.nielsen@jubii.dk')
--------------------------------------------------------------------------------------------------------
Query  : select * from customers where exists (select * from customers where email in ('bjorn.hansen@yahoo.no', 'kara.nielsen@jubii.dk'))
       : Exists keyword returns true if that case is met. 
Result : All the list of customers displayed because Exists returns true.


General: select albums.title from albums table, using the UNION keyword for artistID 1 and 5 
--------------------------------------------------------------------------------------------------------
Query  : select albums.title from albums where artistID = 1 UNION select albums.title from albums where artistID = 5
Result : 3 album titles received.


General: Display a condition where CASE usage is implemented. 
--------------------------------------------------------------------------------------------------------
Query  : select InvoiceId, invoices.Total, 
	    CASE 
     		WHEN invoices.Total < 1.98 THEN "The total is less than 1.98"
     		WHEN invoices.Total < 8.91 THEN "The total is greater than 1.98 but less than 8.91"
	 		ELSE "Out of requested range"
	    END AS TotalPaymentText
		from invoices
Result : 412 records with TotalPaymentText associated.


General: Create a VIEW for the SQL query above with name ConditionalInvoiceReport 
--------------------------------------------------------------------------------------------------------
Query  : CREATE VIEW [ConditionalInvoiceReport] AS select InvoiceId, invoices.Total, 
	    CASE 
     		WHEN invoices.Total < 1.98 THEN "The total is less than 1.98"
     		WHEN invoices.Total < 8.91 THEN "The total is greater than 1.98 but less than 8.91"
	 		ELSE "Out of requested range"
	    END AS TotalPaymentText
		from invoices;

         select * from ConditionalInvoiceReport
Result : 412 records.


General: Find the sum of totals of all Cities in invoices. 
--------------------------------------------------------------------------------------------------------
Query  : select CustomerId, BillingCity, sum(invoices.Total) as InvoiceTotal from invoices GROUP by invoices.BillingCity
Result : 53 records displayed


General: Generate a list that displays Country, count(Country) from customers table. 
--------------------------------------------------------------------------------------------------------
Query  : select Country, count(Country) from customers group by Customers.Country
Result : 24 Countries listed.


General:  Create a list of composers from tracks table which displays the total amount for column UnitPrice. 
--------------------------------------------------------------------------------------------------------
Query  : select composer, sum(unitPrice) from tracks group by Composer 
         select composer, sum(unitPrice) from tracks group by Composer order by unitPrice
         select composer, Round(sum(unitPrice),2) as TotalPrice from tracks group by Composer order by TotalPrice asc  
Result : 854 records



General: Join 2 tables to display the customer names in invoices table. 
--------------------------------------------------------------------------------------------------------
Query  : select invoices.InvoiceId, customers.firstname, customers.lastname,invoices.BillingCity, invoices.Total, invoices.InvoiceDate from customers 
         join invoices on customers.CustomerId = invoices.CustomerId order by invoices.InvoiceId asc
Result : 412 records.


General: Join customers and invoices, display the customer info for the invoices. 
--------------------------------------------------------------------------------------------------------
Query  : select customers.FirstName, customers.LastName, invoices.BillingCity, invoices.BillingCountry, invoices.total from customers 
         join invoices on customers.CustomerId = invoices.CustomerId
Result : 412 records



General: Get a list of tracks table with actual Album name, MediaType Name, Genre Name by joining 3 tables.
--------------------------------------------------------------------------------------------------------
Query  : select TrackId, tracks.name, albums.Title, media_types.Name, genres.Name, Composer, UnitPrice
         from tracks 
	      join albums on albums.AlbumId = tracks.AlbumId
           join media_types on media_types.MediaTypeId = tracks.MediaTypeId 
           join genres on tracks.GenreId = genres.GenreId   
Result : 3503 records


General: Display a list of tracks of tracks.TrackId, Name, albums.Title, media_types.Name, genres.Name, tracks.composer, tracks.unitprice and order it by TrackId ascending 
--------------------------------------------------------------------------------------------------------
Query  : select tracks.TrackId, 
                tracks.name TrackName, 
                albums.title AlbumTitle, 
                media_types.Name MediaType,
                genres.Name GenreName, 
                tracks.composer, 
                tracks.UnitPrice
         from tracks 
	                join albums on albums.AlbumId = tracks.AlbumId 
				  join genres on tracks.GenreId = genres.GenreId
				  join media_types on media_types.MediaTypeId = tracks.MediaTypeId
	    order by tracks.TrackId asc  

Result : 3503 records 



General: Display CustomerID, InvoiceDate from invoices for total column in between 1.98 and 5.94, use sub-query. 
--------------------------------------------------------------------------------------------------------
Query  : select CustomerId, InvoiceDate from invoices
                where total in (select invoices.total from invoices where invoices.total between 1.98 and 5.94)
Result : 233


General: Bring all customer invoices for Customers who live in Canada by using sub-query
--------------------------------------------------------------------------------------------------------
Query  : select * from invoices where customerid in (select customerid from customers where country = 'Canada')
Result : 56 records


General: Create a VIEW of invoices, recorded by the customers who live in canada 
--------------------------------------------------------------------------------------------------------
Query  : CREATE VIEW [CanadianCustomers] AS select * from invoices where customerid in (select customerid from customers where country = 'Canada')
         select * from CanadianCustomers
Result : 56 records.


General: Select invoices which have higher values than the average of USA 
--------------------------------------------------------------------------------------------------------
Query  : select * from invoices where invoices.Total > (select avg(invoices.Total) from invoices where BillingCountry = 'USA') 
Result : 178 records


General: Save the above query as a view. 
--------------------------------------------------------------------------------------------------------
Query  : CREATE VIEW [Sales_AboveUSA_Average] AS select * from invoices where invoices.Total > (select avg(invoices.Total) from invoices where BillingCountry = 'USA');
         select * from Sales_AboveUSA_Average 
Result : 178 records


General: Find Firstname, Lastname from consumers table, with the corresponding Support Resresentative names from Customers and employees tables, save as a view
--------------------------------------------------------------------------------------------------------
Query  : select customers.FirstName, customers.LastName, employees.FirstName as Representitive from customers join employees on customers.SupportRepID = employees.EmployeeId;
         CREATE VIEW [Customers_With_Representitives] as  
             select customers.FirstName, customers.LastName, employees.FirstName as Representitive from customers join employees on customers.SupportRepID = employees.EmployeeId;
         select * from Customers_With_Representitives
Result : 59 records


General: Create a table that keeps track of Logs in our web application, also Exceptions table. 
--------------------------------------------------------------------------------------------------------
Query  : CREATE TABLE "logs" (
	"id"	INTEGER NOT NULL,
	"Date"	TEXT,
	"Info"	TEXT,
    "IssuedBy" TEXT	,
	PRIMARY KEY("id" AUTOINCREMENT)
);
CREATE TABLE "ExceptionDetails" (
	"id"	INTEGER NOT NULL,
	"logID"	INTEGER,
	"ExceptionDetail"	TEXT,
	"DateTime"	TEXT,
	 PRIMARY KEY("id" AUTOINCREMENT)
);
Result : Tables created



General: Insert a record into logs table with random values.
--------------------------------------------------------------------------------------------------------
Query  : insert into logs (date, info, issuedBy) values ('2022','This is a log', 'User Mary');
Result : Record saved in DB.


General: Update the inserted record in logs table
--------------------------------------------------------------------------------------------------------
Query  : update logs set issuedBy = 'User John' where id = 1
Result : Record updated in DB.


General: Create a table that keeps track of SystemLogs in our web application. 
--------------------------------------------------------------------------------------------------------
Query: 
CREATE TABLE "SystemLog" (
	"id"	INTEGER NOT NULL,
	"LogDate"	TEXT,
	"ModuleName"	TEXT,
	"LoggedExceptions"	TEXT,
	"StackTrace"	TEXT,
	"EventDateTime"	TEXT,
	PRIMARY KEY("id" AUTOINCREMENT)
);
Result : Table Created.


General: Insert some data in SystemLog table.
--------------------------------------------------------------------------------------------------------
Query  : insert into SystemLog (LogDate,
                       ModuleName,					   
					   LoggedExceptions, 
					   StackTrace, 
					   EventDateTime) 
                       values (
					   '2022',
					   'This is a log', 
					   'User Mary',
					   'Stack trace details',
					   date()
					   );

Result : Record created.



General: Update the record in the table.
--------------------------------------------------------------------------------------------------------
Query  : update SystemLog set EventDateTime = '2000',
                     StackTrace = 'This is a StackTrace info' 
                     where SystemLog.id = 1
Result : Record updated.


General: Delete the record in the table.
--------------------------------------------------------------------------------------------------------
Query  : delete from logs where id = 1
Result : Record deleted.


General: Insert some data in SystemLog table.
--------------------------------------------------------------------------------------------------------
Query  : insert into SystemLog(LogDate,ModuleName,LoggedExceptions,StackTrace)
 		values ('27.06.2022 13:00:00', 'MainModule',
 		'Stack out of memory','Trace details ...');

Result : Record created.


General: Lets just write a long sql query that will create a table and do some operations on it. 
--------------------------------------------------------------------------------------------------------
Query  : CREATE TABLE "SystemLog" (
	"id"	INTEGER NOT NULL,
	"LogDate"	TEXT,
	"ModuleName"	TEXT,
	"Exception"	TEXT,
	"StackTrace"	TEXT,
	PRIMARY KEY("id" AUTOINCREMENT)
);
insert into SystemLog(LogDate,ModuleName,Exception,StackTrace) values ('27.06.2022 13:00:00', 'MainModule', 'Stack out of memory','Trace details ...');
insert into SystemLog(LogDate,ModuleName,Exception,StackTrace) values ('27.06.2022 13:33:00', 'MainModule', 'Running out of disk space','Trace details ...');
insert into SystemLog(LogDate,ModuleName,Exception,StackTrace) values ('27.06.2022 13:33:00', 'MainModule', 'RAM not enough','Trace details ...');
insert into SystemLog(LogDate,ModuleName,Exception,StackTrace) values ('27.06.2022 13:33:00', 'MainModule', 'Critical Error in module','Trace details ...');
alter table SystemLog rename column Exception to LoggedExceptions;
alter table SystemLog add column EventDateTime;
update SystemLog set EventDateTime = datetime('now');

Result : Requested operations completed on the table.


General: How to delete several rows? 
--------------------------------------------------------------------------------------------------------
Query  : delete from invoices where invoiceId > 500
Result : Records having id > 500 are deleted.


General: Create a View of comparative sales by countries.
--------------------------------------------------------------------------------------------------------
Query  : 
Drop View CountriesComparative;
CREATE VIEW [CountriesComparative] AS             
            SELECT BillingCountry, sum(Total) from invoices where BillingCountry = 'USA'
		    Union
              Select BillingCountry, sum(Total) from invoices where BillingCountry = 'Germany' 
			UNION
			  Select BillingCountry, sum(Total) from invoices where BillingCountry = 'Norway' 
			UNION
			  Select BillingCountry, sum(Total) from invoices where BillingCountry = 'Belgium' 
			UNION
			  Select BillingCountry, sum(Total) from invoices where BillingCountry = 'Canada' 
		    order by BillingCountry;
select * from CountriesComparative;

Result : Requested view has been created.


General: Create a View of comparative overall sales by countries.
--------------------------------------------------------------------------------------------------------
Query  : 
Drop View CountriesComparativeOverall;
CREATE VIEW [CountriesComparativeOverall] AS             
            SELECT sum(Total) as OverallTotal, 
			      (Select sum(Total) from invoices where BillingCountry = 'USA') as USAOverallTotal, 
				  (Select sum(Total) from invoices where BillingCountry = 'Germany') as GermanyOverallTotal,
				  (Select sum(Total) from invoices where BillingCountry = 'Norway') as NorwayOverallTotal,
				  (Select sum(Total) from invoices where BillingCountry = 'Belgium') as BelgiumOverallTotal
			from invoices;
select * from CountriesComparativeOverall;

Result : Requested view has been created.


General: Generate a list that displays which employee reporting to which manager? 
--------------------------------------------------------------------------------------------------------
Query  : 
select EmployeeID, Firstname, Lastname, 
case 
     WHEN employees.ReportsTo = 1 THEN "Reports to General Manager"
     WHEN employees.ReportsTo = 2 THEN "Reports to Sales Manager"
     WHEN employees.ReportsTo = 3 THEN "Reports to Sales Support Agent Jane Peacock"
     WHEN employees.ReportsTo = 4 THEN "Reports to Sales Manager Agent Margareth Park"
     WHEN employees.ReportsTo = 5 THEN "Reports to Sales Manager Steve JohnSon"
     WHEN employees.ReportsTo = 6 THEN "Reports to IT Manager"
     WHEN employees.ReportsTo = 7 THEN "Reports to IT Staff King Robert"
     WHEN employees.ReportsTo = 8 THEN "Reports to IT Laura Callahan"
     WHEN (employees.ReportsTo = 9 OR employees.ReportsTo = 10) THEN "Out of scope"
	ELSE "Reports no-one"
END AS ReportsTo
from Employees
Result : 8 Employees listed with extensive explanations.


XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
POSTGRESQL WORKOUT
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


==================================================================================================================
Open PostgreSQL, show ERD diagram in Clarusway DB, display FK, PK in Customers table.
==================================================================================================================
update orders set ship_region = 'London' where order_id = 1
==================================================================================================================
Create a join query in PostgreSQL
select orders.order_id, 
       customers.customer_Id as CustomerID,
	   orders.order_date
	   from orders
	   join customers on customers.customer_id = orders.customer_id
==================================================================================================================
Create a view in PostgreSQL : 
CREATE VIEW CountriesComparative AS           (The difference is with Sqlite, [CountriesComparative])   
            SELECT sum(Freight) as OverallTotal, 
			      (Select sum(Freight) from orders where ship_country = 'USA') as USAOverallTotal, 
				  (Select sum(Freight) from orders where ship_country = 'Germany') as GermanyOverallTotal,
				  (Select sum(Freight) from orders where ship_country = 'France') as FranceOverallTotal,
				  (Select sum(Freight) from orders where ship_country = 'Sweeden') as SweedenOverallTotal
			from orders 
==================================================================================================================
PostgreSQL : SELECT * FROM public.countriescomparative
==================================================================================================================
CREATE TABLE "logs" (
	"id"	INTEGER NOT NULL,
	"Date"	TEXT,
	"Info"	TEXT,
    "IssuedBy" TEXT	
	PRIMARY KEY("id" AUTOINCREMENT)
);
CREATE TABLE "ExceptionDetails" (
	"id"	INTEGER NOT NULL,
	"logID"	INTEGER,
	"ExceptionDetail"	TEXT,
	"DateTime"	TEXT,
	 PRIMARY KEY("id")
);
==================================================================================================================
PostgreSQL demonstration:
select order_Id from orders order by freight asc
select count(distinct ship_city) as DistinctCities from orders
select distinct ship_city as DistinctCities from orders order by ship_city







